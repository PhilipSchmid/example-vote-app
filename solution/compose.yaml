services:
  vote:
    # TODO: Ensure you are able to use "docker-compose build" to automatically build the Dockerfile within "./src/vote".
    build: ./src/vote
    image: ghcr.io/philipschmid/vote-demo-vote:latest
    restart: on-failure
    # TODO: Container port 80 should be exposed to 5000 on the host:
    ports:
      - "5000:80"
    # TODO: The vote service needs a connection to the frontend and backend network
    networks:
      - front-tier
      - back-tier

  result:
    build: ./src/result
    image: ghcr.io/philipschmid/vote-demo-result:latest
    restart: on-failure
    # TODO: This microservice should be started after the "db" service. Define this dependency.
    depends_on:
      - "db"
    # TODO: Container port 80 should be exposed to 5001 on the host:
    ports:
      - 5001:80
    # TODO: The vote service needs a connection to the frontend and backend network
    networks:
      - front-tier
      - back-tier

  worker:
    # Required for ARM devices:
    platform: linux/amd64
    build: ./src/worker
    image: ghcr.io/philipschmid/vote-demo-worker:latest
    restart: on-failure
    # TODO: This microservice should be started after the "redis" service. Define this dependency.
    depends_on:
      - "redis"
    networks:
      - back-tier

  redis:
    # TODO: Use the official Redis image from the Docker Hub. Use the latest 7.x.x version.
    image: redis:7.0.9
    # TODO: Defined a static container name for this service. It should be called "redis".
    container_name: redis
    restart: on-failure
    networks:
      - back-tier

  db:
    image: postgres:14.7-alpine
    # TODO: Defined a static container name for this service. It should be called "db".
    container_name: db
    restart: on-failure
    # TODO: Ensure to set the superuser password for PostgreSQL via the regarding environment variable (see https://hub.docker.com/_/postgres).
    environment:
      - POSTGRES_PASSWORD=postgres
    # TODO: Mount the host directory "./db-data" to the default "PGDATA" path of this image. This will ensures your data is persisted and survives restarts.
    volumes:
      - "./db-data:/var/lib/postgresql/data"
    networks:
      - back-tier

networks:
  # TODO: Define two networks: "front-tier" and "back-tier". Ensure "back-tier" is not bridged to the outside world.
  front-tier:
  back-tier:
    internal: true
