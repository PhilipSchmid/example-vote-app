# NS
---
apiVersion: v1
kind: Namespace
metadata:
  name: demo

# redis
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: demo
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: demo
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:6.2.6
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
         claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
  name: redis
  namespace: demo
spec:
  type: ClusterIP
  ports:
  - name: redis-service
    port: 6379
    targetPort: 6379
  selector:
    app: redis

# db
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: db
  name: db
  namespace: demo
spec:
  type: ClusterIP
  ports:
  - name: db
    port: 5432
    targetPort: 5432
  selector:
    app: db
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-pgdata-path
  namespace: demo
data:
  PGDATA: /var/lib/postgresql/data/pgdata
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-db-creds
  namespace: demo
type: Opaque
stringData:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db
  namespace: demo
  labels:
    app: db
spec:
  replicas: 1
  serviceName: db
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - name: db
        image: postgres:14.2-alpine
        envFrom:
        - configMapRef:
            name: postgres-pgdata-path
        - secretRef:
            name: postgres-db-creds
        ports:
        - containerPort: 5432
          name: db
        volumeMounts:
        - name: db-data
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: db-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

# result
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: result
  namespace: demo
  labels:
    app: result
spec:
  replicas: 1
  selector:
    matchLabels:
      app: result
  template:
    metadata:
      labels:
        app: result
    spec:
      containers:
      - name: result
        image: pschmid/vote-demo-result
        ports:
        - containerPort: 80
          name: result
---
apiVersion: v1
kind: Service
metadata:
  name: result
  namespace: demo
  labels:
    app: result
spec:
  type: ClusterIP
  ports:
  - port: 5001
    targetPort: 80
    name: result-service
  selector:
    app: result
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: result
  namespace: demo
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: "result.YOUR-PUBLIC-IP-HERE.xip.puzzle.ch"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: result
            port:
              number: 5001

# vote
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vote
  namespace: demo
  labels:
    app: vote
spec:
  replicas: 2
  selector:
    matchLabels:
      app: vote
  template:
    metadata:
      labels:
        app: vote
    spec:
      containers:
      - name: vote
        image: pschmid/vote-demo-vote
        ports:
        - containerPort: 80
          name: vote
---
apiVersion: v1
kind: Service
metadata:
  name: vote
  namespace: demo
  labels:
    apps: vote
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: 80
      name: vote-service
  selector:
    app: vote
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote
  namespace: demo
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: "vote.YOUR-PUBLIC-IP-HERE.xip.puzzle.ch"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: vote
            port:
              number: 5000

# worker
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: worker
  name: worker
  namespace: demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: worker
  template:
    metadata:
      labels:
        app: worker
    spec:
      containers:
      - image: pschmid/vote-demo-worker
        name: worker